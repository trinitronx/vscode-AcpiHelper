// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as path from 'path';
import * as vscode from 'vscode';
import { ConfigManager } from './lib/configmanager';

export const configManager = new ConfigManager("");
let output: vscode.OutputChannel;

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
	output = vscode.window.createOutputChannel("AcpiHelper");
	// Use an output channel to output diagnostic information
	// This line of code will only be executed once when your extension is activated
	//console.log ('Now Lets check the path');
	output.appendLine('Congratulations, your extension "acpihelper" is now active!');
	
	
	// Load the config file once during activation
	loadConfig(context);
	// Handle configuration changes
	vscode.workspace.onDidChangeConfiguration(event => {
		// Handle configuration changes
		handleConfigChange(event, context);
	});
	

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('acpihelper.Help', () => {
		// The code you place here will be executed every time your command is executed
		// Display a message box to the user
		vscode.window.showInformationMessage('Hello World from AcpiHelper!');
	});

    // Add reload config command
    let reloadConfig = vscode.commands.registerCommand('acpihelper.reloadConfig', () => {
        loadConfig(context);
        return Promise.resolve();
    });
	 

	vscode.languages.registerHoverProvider('EASL', {
		provideHover(document, position, token) {
			const range = document.getWordRangeAtPosition(position);
			const word = document.getText(range);
			let strTxt: string = GetPreDefineObjIndex(word);
			if (strTxt != "")
			{
				return new vscode.Hover(strTxt);
			}
		}
 	});
  
		

  
	context.subscriptions.push(disposable);
	context.subscriptions.push(reloadConfig);
	output.appendLine('extension context.extensionMode: ' + context.extensionMode);
	output.appendLine('context.extensionMode == test : ' + (context.extensionMode === vscode.ExtensionMode.Test));
	if (context.extensionMode === vscode.ExtensionMode.Test) {
		// Only export the internal configManager instance when running
		// integration tests
		return {
			configManager: configManager
		};
	}
}

// Load or reload the extension config
function loadConfig(context: vscode.ExtensionContext) {
	const config = vscode.workspace.getConfiguration('acpihelper');
	const extensionDir = context.extensionPath;
	let cfgPath = config.get('configPath', "");
	let includeUserConfig = config.get('includeUserConfig', false);
	let useConfig: boolean = false;

	// Reset the external config keywords and descriptions
	// ExtConfigKey = [];
	// ExtConfigDesc = [];

	if (cfgPath === "" && includeUserConfig) {
		// Config file is explicitly disabled
		useConfig = false;
		output.appendLine('Config path disabled.');
		output.appendLine('Only standard keywords in ACPI specification will be shown.');
	} else if (cfgPath != "" && includeUserConfig) {
		// Use user-defined config path
		useConfig = true;
		output.appendLine('User-defined config path: ' + cfgPath);
		output.appendLine('Extra user-defined keywords and those in the ACPI specification will be shown.');
	} else if (!includeUserConfig) {
		// Use the default config path
		useConfig = true;
		cfgPath = path.join(extensionDir, 'AcpiCfg.json');
		output.appendLine('Default extension-provided config path: ' + cfgPath);
		output.appendLine('Extra keywords defined by this extension and those in the ACPI specification will be shown.');
	}
	if (useConfig === true) {
		output.appendLine('Loading config path: ' + cfgPath);
		// TODO: Remove debugging
		// output.appendLine('Initial array state - ExtConfigKey:' + ExtConfigKey);
		// output.appendLine('Initial array state - ExtConfigDesc:' + ExtConfigDesc);
		output.appendLine('loadConfig(): Initial array state - configManager.configKey:' + configManager.configKey);
		output.appendLine('loadConfig(): Initial array state - configManager.configDesc:' + configManager.configDesc);

		configManager.configPath = cfgPath;

		configManager.loadConfig(output).then(() => {
			output.appendLine('Finished loading config!');
            // TODO: Remove debugging
			// Log final state
			output.appendLine('loadConfig(): Final state - configManager.configKey:' + configManager.configKey);
			output.appendLine('loadConfig(): Final state - configManager.configDesc:' + configManager.configDesc);
		});
	}
}

// Event handler for configuration changes
function handleConfigChange(event: vscode.ConfigurationChangeEvent, context: vscode.ExtensionContext) {
	if (event.affectsConfiguration('acpihelper')) {
		// Configuration related to this extension has changed
		loadConfig(context);
	}
}

function GetPreDefineObjIndex(STxt: string) :string {
    let PreDefineName: string[] = [
		"_ACx", "_ADR", "_AEI", "_ALC", 
		"_ALI", "_ALN", "_ALP", "_ALR", 
		"_ALT", "_ALx", "_ART", "_ASI", 
		"_ASZ", "_ATT", "_BAS", "_BBN", 
		"_BCL", "_BCM", "_BCT", "_BDN", 
		"_BIF", "_BIX", "_BLT", "_BM", 
		"_BMA", "_BMC", "_BMD", "_BMS", 
		"_BPC", "_BPS", "_BPT", "_BQC", 
		"_BST", "_BTH", "_BTM", "_BTP", 
		"_CBA", "_CBR", "_CCA", "_CDM", 
		"_CID", "_CLS", "_CPC", "_CRS", 
		"_CRT", "_CSD", "_CST", "_CWS", 
		"_DBT", "_DCK", "_DCS", "_DDC", 
		"_DDN", "_DEC", "_DEP", "_DGS", 
		"_DIS", "_DLM", "_DMA", "_DOD", 
		"_DOS", "_DPL", "_DRS", "_DSD", 
		"_DSM", "_DSS", "_DSW", "_DTI", 
		"_Exx", "_EC", "_EDL", "_EJD", 
		"_EJx", "_END", "_EVT", "_FDE", 
		"_FDI", "_FDM", "_FIF", "_FIT", 
		"_FIX", "_FLC", "_FPS", "_FSL", 
		"_FST", "_GAI", "_GCP", "_GHL", 
		"_GL", "_GLK", "_GPD", "_GPE", 
		"_GRA", "_GRT", "_GSB", "_GTF", 
		"_GTM", "_GWS", "_HE", "_HID", 
		"_HMA", "_HOT", "_HPP", "_HPX", 
		"_HRV", "_IFT", "_INI", "_INT", 
		"_IOR", "_IRC", "_Lxx", "_LCK", 
		"_LEN", "_LID", "_LIN", "_LL", 
		"_LPI", "_LSI", "_LSR", "_LSW", 
		"_MAF", "_MAT", "_MAX", "_MBM", 
		"_MEM", "_MIF", "_MIN", "_MLS", 
		"_MOD", "_MSG", "_MSM", "_MTL", 
		"_MTP", "_NTT", "_OFF", "_ON", 
		"_OS", "_OSC", "_OSI", "_OST", 
		"_PAI", "_PAR", "_PCL", "_PCT", 
		"_PDC", "_PDL", "_PHA", "_PIC", 
		"_PIF", "_PIN", "_PLD", "_PMC", 
		"_PMD", "_PMM", "_POL", "_PPC", 
		"_PPE", "_PPI", "_PR", "_PR0", 
		"_PR1", "_PR2", "_PR3", "_PRE", 
		"_PRL", "_PRR", "_PRS", "_PRT", 
		"_PRW", "_PS0", "_PS1", "_PS2", 
		"_PS3", "_PSC", "_PSD", "_PSE", 
		"_PSL", "_PSR", "_PSS", "_PSV", 
		"_PSW", "_PTC", "_PTP", "_PTS", 
		"_PUR", "_PXM", "_Qxx", "_RBO", 
		"_RBW", "_RDI", "_REG", "_REV", 
		"_RMV", "_RNG", "_ROM", "_RST", 
		"_RT", "_RTV", "_RW", "_RXL", 
		"_S0", "_S1", "_S2", "_S3", 
		"_S4", "_S5", "_S1D", "_S2D", 
		"_S3D", "_S4D", "_S0W", "_S1W", 
		"_S2W", "_S3W", "_S4W", "_SB", 
		"_SBS", "_SCP", "_SDD", "_SEG", 
		"_SHL", "_SHR", "_SI", "_SIZ", 
		"_SLI", "_SLV", "_SPD", "_SPE", 
		"_SRS", "_SRT", "_SRV", "_SST", 
		"_STA", "_STB", "_STM", "_STP", 
		"_STR", "_STV", "_SUB", "_SUN", 
		"_SWS", "_T_x", "_TC1", "_TC2", 
		"_TDL", "_TFP", "_TIP", "_TIV", 
		"_TMP", "_TPC", "_TPT", "_TRA", 
		"_TRS", "_TRT", "_TSD", "_TSF", 
		"_TSN", "_TSP", "_TSS", "_TST", 
		"_TTP", "_TTS", "_TXL", "_TYP", 
		"_TZ", "_TZD", "_TZM", "_TZP", 
		"_UID", "_UPC", "_UPD", "_UPP", 
		"_VEN", "_VPO", "_WAK", "_WPC", 
		"_WPP", "_Wxx", 
		"PNP0C08", "PNP0A05", 
		"PNP0A06", "PNP0C09", 
		"PNP0C0A", "PNP0C0B", 
		"PNP0C0C", "PNP0C0D", 
		"PNP0C0E", "PNP0C0F", 
		"PNP0C80", "ACPI0001", 
		"ACPI0002", "ACPI0003", 
		"ACPI0004", "ACPI0005", 
		"ACPI0006", "ACPI0007", 
		"ACPI0008", "ACPI0009", 
		"ACPI000A", "ACPI000B", 
		"ACPI000C", "ACPI000D", 
		"ACPI000E", "ACPI000F", 
		"ACPI0010", "ACPI0011", 
		"ACPI0012", "ACPI0013", 
		"ACPI0014", "ACPI0015", 
		"ACPI0016", "PNP0802", 
		"PNP0000", "PNP0001", 
		"PNP0002", "PNP0003", 
		"PNP0004", "PNP0100", 
		"PNP0101", "PNP0102", 
		"PNP0200", "PNP0201", 
		"PNP0202", "PNP0300", 
		"PNP0301", "PNP0302", 
		"PNP0303", "PNP0304", 
		"PNP0305", "PNP0306", 
		"PNP0307", "PNP0308", 
		"PNP0309", "PNP030A", 
		"PNP030B", "PNP0320", 
		"PNP0321", "PNP0322", 
		"PNP0323", "PNP0324", 
		"PNP0325", "PNP0326", 
		"PNP0327", "PNP0340", 
		"PNP0341", "PNP0342", 
		"PNP0343", "PNP0343", 
		"PNP0344", "PNP0400", 
		"PNP0401", "PNP0500", 
		"PNP0501", "PNP0502", 
		"PNP0510", "PNP0511", 
		"PNP0600", "PNP0601", 
		"PNP0602", "PNP0603", 
		"PNP0700", "PNP0701", 
		"PNP0900", "PNP0901", 
		"PNP0902", "PNP0903", 
		"PNP0904", "PNP0905", 
		"PNP0906", "PNP0907", 
		"PNP0908", "PNP0909", 
		"PNP090A", "PNP090B", 
		"PNP090C", "PNP090D", 
		"PNP090E", "PNP090F", 
		"PNP0910", "PNP0911", 
		"PNP0912", "PNP0913", 
		"PNP0914", "PNP0915", 
		"PNP0916", "PNP0917", 
		"PNP0918", "PNP0919", 
		"PNP091A", "PNP0930", 
		"PNP0931", "PNP0940", 
		"PNP0941", "PNP09FF", 
		"PNP0A00", "PNP0A01", 
		"PNP0A02", "PNP0A03", 
		"PNP0A04", "PNP0A05", 
		"PNP0A06", "PNP0800", 
		"PNP0B00", "PNP0C00", 
		"PNP0C01", "PNP0C02", 
		"PNP0C03", "PNP0C04", 
		"PNP0C05", "PNP0C06", 
		"PNP0C07", "PNP0C08", 
		"PNP0C09", "PNP0C0A", 
		"PNP0C0B", "PNP0C0C", 
		"PNP0C0D", "PNP0C0E", 
		"PNP0C0F", "PNP0C10", 
		"PNP0C11", "PNP0C12", 
		"PNP0C13", "PNP0E00", 
		"PNP0E01", "PNP0E02", 
		"PNP0E03", "PNP0F00", 
		"PNP0F01", "PNP0F02", 
		"PNP0F03", "PNP0F04", 
		"PNP0F05", "PNP0F06", 
		"PNP0F07", "PNP0F08", 
		"PNP0F09", "PNP0F0A", 
		"PNP0F0B", "PNP0F0C", 
		"PNP0F0D", "PNP0F0E", 
		"PNP0F0F", "PNP0F10", 
		"PNP0F11", "PNP0F12", 
		"PNP0F13", "PNP0F14", 
		"PNP0F15", "PNP0F16", 
		"PNP0F17", "PNP0F18", 
		"PNP0F19", "PNP0F1A", 
		"PNP0F1B", "PNP0F1C", 
		"PNP0F1D", "PNP0F1E", 
		"PNP0F1F", "PNP0F20", 
		"PNP0F21", "PNP0F22", 
		"PNP0F23", "PNP0FFF", 
		"PNP8001", "PNP8004", 
		"PNP8006", "PNP8008", 
		"PNP8065", "PNP8072", 
		"PNP8073", "PNP8078", 
		"PNP8074", "PNP80C9", 
		"PNP80CA", "PNP80CB", 
		"PNP80CC", "PNP80D3", 
		"PNP80D4", "PNP80D5", 
		"PNP80D6", "PNP80D7", 
		"PNP80D8", "PNP80DD", 
		"PNP80DE", "PNP80DF", 
		"PNP80E0", "PNP80E1", 
		"PNP80E2", "PNP80E5", 
		"PNP80E7", "PNP80E8", 
		"PNP80E9", "PNP80EA", 
		"PNP80EB", "PNP80EC", 
		"PNP80ED", "PNP80EE", 
		"PNP80EF", "PNP80F1", 
		"PNP80F3", "PNP80F4", 
		"PNP80F6", "PNP80F7", 
		"PNP80F8", "PNP80FB", 
		"PNP80FC", "PNP80FD", 
		"PNP80FE", "PNP80FF", 
		"PNP8100", "PNP8105", 
		"PNP8106", "PNP8107", 
		"PNP8113", "PNP811C", 
		"PNP8120", "PNP8123", 
		"PNP8124", "PNP8125", 
		"PNP8126", "PNP8127", 
		"PNP8128", "PNP812A", 
		"PNP812D", "PNP812F", 
		"PNP8130", "PNP8132", 
		"PNP8137", "PNP8138", 
		"PNP8141", "PNP8142", 
		"PNP814B", "PNP8155", 
		"PNP8156", "PNP8157", 
		"PNP8158", "PNP8159", 
		"PNP815F", "PNP8160", 
		"PNP816A", "PNP816D", 
		"PNP8191", "PNP81C3", 
		"PNP81C4", "PNP81C5", 
		"PNP81C6", "PNP81C7", 
		"PNP81C8", "PNP81E4", 
		"PNP81E6", "PNP81E7", 
		"PNP81EB", "PNP81EC", 
		"PNP81ED", "PNP81EE", 
		"PNP81EF", "PNP81F0", 
		"PNP81FF", "PNP8200", 
		"PNP8209", "PNP820A", 
		"PNP8213", "PNP8214", 
		"PNP821D", "PNP8227", 
		"PNP8228", "PNP8231", 
		"PNP8263", "PNP8277", 
		"PNP828A", "PNP828B", 
		"PNP828C", "PNP828D", 
		"PNP8294", "PNP82BD", 
		"PNP82C2", "PNP82C3", 
		"PNP8321", "PNP8323", 
		"PNP8324", "PNP8326", 
		"PNP8327", "PNP8385", 
		"PNP8387", "PNP8388", 
		"PNP8389", "PNP8390", 
		"PNPA002", "PNPA003", 
		"PNPA01B", "PNPA01D", 
		"PNPA01E", "PNPA01F", 
		"PNPA020", "PNPA022", 
		"PNPA02B", "PNPA02D", 
		"PNPA02F", "PNPA030", 
		"PNPA031", "PNPA032", 
		"PNPB000", "PNPB001", 
		"PNPB002", "PNPB003", 
		"PNPB004", "PNPB005", 
		"PNPB006", "PNPB007", 
		"PNPB008", "PNPB009", 
		"PNPB00A", "PNPB00B", 
		"PNPB00C", "PNPB00D", 
		"PNPB00E", "PNPB00F", 
		"PNPB010", "PNPB018", 
		"PNPB019", "PNPB020", 
		"PNPB02F", "PNPC000", 
		"PNPC001"
		];
		
	let PreDefNameHelpStr: string[] = [
		"Active Cooling – returns the active cooling policy threshold values.", 
		"Address: (1) returns the address of a device on its parent bus. (2) returns a unique ID for the display output device. (3) resource descriptor field.", 
		"Designates those GPIO interrupts that shall be handled by OSPM as ACPI events.", 
		"Ambient Light Chromaticity – returns the ambient light color chromaticity.", 
		"Ambient Light Illuminance – returns the ambient light brightness.", 
		"Alignment – base alignment, resource descriptor field.", 
		"Ambient Light Polling – returns the ambient light sensor polling frequency.", 
		"Ambient Light Response – returns the ambient light brightness to display brightness mappings.", 
		"Ambient Light Temperature – returns the ambient light color temperature.", 
		"Active List – returns a list of active cooling device objects.", 
		"Active cooling Relationship Table – returns thermal relationship information between platform devices and fan devices.", 
		"Address Space Id – resource descriptor field.", 
		"Access Size – resource descriptor field.", 
		"Type-Specific Attribute – resource descriptor field.", 
		"Base Address – range base address, resource descriptor field.", 
		"Bios Bus Number – returns the PCI bus number returned by the platform firmware.", 
		"Brightness Control Levels – returns a list of supported brightness control levels.", 
		"Brightness Control Method – sets the brightness level of the display device.", 
		"Battery Charge Time – returns time remaining to complete charging battery.", 
		"Bios Dock Name – returns the Dock ID returned by the platform firmware.", 
		"Battery Information – returns a Control Method Battery information block.", 
		"Battery Information Extended – returns a Control Method Battery extended information block.", 
		"Battery Level Threshold – set battery level threshold preferences.", 
		"Bus Master – resource descriptor field.", 
		"Battery Measurement Averaging Interval – Sets battery measurement averaging interval.", 
		"Battery Maintenance Control – Sets battery maintenance and control features.", 
		"Battery Maintenance Data – returns battery maintenance, control, and state data.", 
		"Battery Measurement Sampling Time – Sets the battery measurement sampling time.", 
		"Battery Power Characteristics", 
		"Battery Power State", 
		"Battery Power Threshold", 
		"Brightness Query Current – returns the current display brightness level.", 
		"Battery Status – returns a Control Method Battery status block.", 
		"Battery Throttle Limit - specifies the thermal throttle limit of battery for the firmware when engaging charging.", 
		"Battery Time – returns the battery runtime.", 
		"Battery Trip Point – sets a Control Method Battery trip point.", 
		"Configuration Base Address – returns the base address of the MMIO range corresponding to the Enhanced Configuration Access Mechanism for a PCI Express or Compute Express Link host bus. The full description for the _CBA object resides in the PCI Firmware Specification. A reference to that specification is found in the “Links to ACPI-Related Documents” (http://uefi.org/acpi) under the heading “PCI SIG”.", 
		"CXL Host Bridge Register Info", 
		"Cache Coherency Attribute – specifies whether a device and its descendants support hardware managed cache coherency.", 
		"Clock Domain – returns a logical processor’s clock domain identifier.", 
		"Compatible ID – returns a device’s Plug and Play Compatible ID list.", 
		"Class Code – supplies OSPM with the PCI-defined class, subclass and programming interface for a device. Optional.", 
		"Continuous Performance Control – declares an interface that allows OSPM to transition the processor into a performance state based on a continuous range of allowable values.", 
		"Current Resource Settings – returns the current resource settings for a device.", 
		"Critical Temperature – returns the shutdown critical temperature.", 
		"C State Dependencies – returns a list of C-state dependencies.", 
		"C States – returns a list of supported C-states.", 
		"Clear Wake Status – Clears the wake status of a Time and Alarm Control Method Device.", 
		"Debounce Timeout -Debounce timeout setting for a GPIO input connection, resource descriptor field", 
		"Dock – sets docking isolation. Presence indicates device is a docking station.", 
		"Display Current Status – returns status of the display output device.", 
		"Display Data Current – returns the EDID for the display output device.", 
		"Dos Device Name – returns a device logical name.", 
		"Decode – device decoding type, resource descriptor field.", 
		"Operation Region Dependencies – evaluates to a package and designates device objects that OSPM should assign a higher priority in start ordering due to future operation region accesses.", 
		"Display Graphics State – returns the current state of the output device.", 
		"Disable – disables a device.", 
		"Device Lock Mutex- Designates a mutex as a Device Lock.", 
		"Direct Memory Access – returns a device’s current resources for DMA transactions.", 
		"Display Output Devices – enumerate all devices attached to the display adapter.", 
		"Disable Output Switching – sets the display output switching mode.", 
		"Device Selection Polarity - The polarity of the Device Selection signal on a SPISerialBus connection, resource descriptor field", 
		"Drive Strength – Drive strength setting for a GPIO output connection, resource descriptor field", 
		"Device Specific Data– returns device-specific information.", 
		"Device Specific Method – executes device-specific functions.", 
		"Device Set State – sets the display device state.", 
		"Device Sleep Wake – sets the sleep and wake transition states for a device.", 
		"Device Temperature Indication – conveys native device temperature to the platform.", 
		"Edge GPE – method executed as a result of a general-purpose event.", 
		"Embedded Controller – returns EC offset and query information.", 
		"Eject Device List – returns a list of devices that are dependent on a device (docking).", 
		"Ejection Dependent Device – returns the name of dependent (parent) device (docking).", 
		"Eject – begin or cancel a device ejection request (docking).", 
		"Endian-ness – Endian orientation of a UART SerialBus connection, resource descriptor field", 
		"Event Method - Event method for GPIO-signaled events numbered larger than 255.", 
		"Floppy Disk Enumerate – returns floppy disk configuration information.", 
		"Floppy Drive Information – returns a floppy drive information block.", 
		"Floppy Drive Mode – sets a floppy drive speed.", 
		"Fan Information – returns fan device information.", 
		"Firmware Interface Table - returns a list of NFIT Structures.", 
		"Fixed Register Resource Provider – returns a list of devices that implement FADT register blocks.", 
		"Flow Control – Flow Control mechanism for a UART SerialBus connection, resource descriptor field", 
		"Fan Performance States – returns a list of supported fan performance states.", 
		"Fan Set Level – Control method that sets the fan device’s speed level (performance state).", 
		"Fan Status – returns current status information for a fan device.", 
		"Get Averaging Interval – returns the power meter averaging interval.", 
		"Get Capabilities – Returns the capabilities of a Time and Alarm Control Method Device", 
		"Get Hardware Limit – returns the hardware limit enforced by the power meter.", 
		"Global Lock – OS-defined Global Lock mutex object.", 
		"Global Lock – returns a device’s Global Lock requirement for device access.", 
		"Get Post Data – returns the value of the VGA device that will be posted at boot.", 
		"General Purpose Events: (1) predefined Scope (_GPE). (2) Returns the SCI interrupt associated with the Embedded Controller.", 
		"Granularity – address space granularity, resource descriptor field.", 
		"Get Real Time – Returns the current time from a Time and Alarm Control Method Device.", 
		"Global System Interrupt Base – returns the GSB for a I/O APIC device.", 
		"Get Task File – returns a list of ATA commands to restore a drive to default state.", 
		"Get Timing Mode – returns a list of IDE controller timing information.", 
		"Get Wake Status – Gets the wake status of a Time and Alarm Control Method Device.", 
		"High-Edge – interrupt triggering, resource descriptor field.", 
		"Hardware ID – returns a device’s Plug and Play Hardware ID.", 
		"Heterogeneous Memory Attributes - returns a list of HMAT structures.", 
		"Hot Temperature – returns the critical temperature for sleep (entry to S4).", 
		"Hot Plug Parameters – returns a list of hot-plug information for a PCI device.", 
		"Hot Plug Parameter Extensions – returns a list of hot-plug information for a PCI device. Supersedes _HPP.", 
		"Hardware Revision– supplies OSPM with the device’s hardware revision. Optional.", 
		"IPMI Interface Type. See the Intelligent Platform Management Interface Specification at “Links to ACPI-Related Documents” (http://uefi.org/acpi) under the heading “Server Platform Management Interface Table”.", 
		"Initialize – performs device specific initialization.", 
		"Interrupts – interrupt mask bits, resource descriptor field.", 
		"IO Restriction – IO restriction setting for a GPIO IO connection, resource descriptor field", 
		"Inrush Current – presence indicates that a device has a significant inrush current draw.", 
		"Level GPE – Control method executed as a result of a general-purpose event.", 
		"Lock – locks or unlocks a device (docking).", 
		"Length – range length, resource descriptor field.", 
		"Lid – returns the open/closed status of the lid on a mobile system.", 
		"Lines in Use - Handshake lines in use in a UART SerialBus connection, resource descriptor field", 
		"Low Level – interrupt polarity, resource descriptor field.", 
		"Low Power Idle States – returns the list of low power idle states supported by a processor or processor container.", 
		"Label Storage Information – Returns information about the Label Storage Area associated with the NVDIMM object, including its size.", 
		"Label Storage Read – Returns label data from the Label Storage Area of the NVDIMM object.", 
		"Label Storage Write – Writes label data in to the Label Storage Area of the NVDIMM object.", 
		"Maximum Address Fixed – resource descriptor field.", 
		"Multiple Apic Table Entry – returns a list of Interrupt Controller Structures.", 
		"Maximum Base Address – resource descriptor field.", 
		"Memory Bandwidth Monitoring Data – returns bandwidth monitoring data for a memory device.", 
		"Memory Attributes – resource descriptor field.", 
		"Minimum Address Fixed – resource descriptor field.", 
		"Minimum Base Address – resource descriptor field.", 
		"Multiple Language String – returns a device description in multiple languages.", 
		"Mode –Resource descriptor field", 
		"Message – sets the system message waiting status indicator.", 
		"Memory Set Monitoring – sets bandwidth monitoring parameters for a memory device.", 
		"Minimum Throttle Limit – returns the minimum throttle limit of a specific thermal.", 
		"Memory Type – resource descriptor field.", 
		"Notification Temperature Threshold – returns a threshold for device temperature change that requires platform notification.", 
		"Off – sets a power resource to the off state.", 
		"On – sets a power resource to the on state.", 
		"Operating System – returns a string that identifies the operating system.", 
		"Operating System Capabilities – inform AML of host features and capabilities.", 
		"Operating System Interfaces – returns supported interfaces, behaviors, and features.", 
		"Ospm Status Indication – inform AML of event processing status.", 
		"Power Averaging Interval – sets the averaging interval for a power meter.", 
		"Parity – Parity for a UART SerialBus connection, resource descriptor field", 
		"Power Consumer List – returns a list of devices powered by a power source.", 
		"Performance Control – returns processor performance control and status registers.", 
		"Processor Driver Capabilities – inform AML of processor driver capabilities.", 
		"P-state Depth Limit – returns the lowest available performance P-state.", 
		"Clock Phase – Clock phase for a SPISerialBus connection, resource descriptor field", 
		"PIC – inform AML of the interrupt model in use.", 
		"Power Source Information – returns a Power Source information block.", 
		"Pin List – List of GPIO pins described, resource descriptor field.", 
		"Physical Location of Device  – returns a device’s physical location information.", 
		"Power Meter Capabilities – returns a list of Power Meter capabilities info.", 
		"Power Metered Devices – returns a list of devices that are measured by the power meter device.", 
		"Power Meter Measurement – returns the current value of the Power Meter.", 
		"Polarity – Resource descriptor field", 
		"Performance Present Capabilites – returns a list of the performance states currently supported by the platform.", 
		"Polling for Platform Error – returns the polling interval to retrieve Corrected Platform Error information.", 
		"Pin Configuration – Pin configuration for a GPIO connection, resource descriptor field", 
		"Processor – predefined scope for processor objects.", 
		"Power Resources for D0 – returns a list of dependent power resources to enter state D0 (fully on).", 
		"Power Resources for D1 – returns a list of dependent power resources to enter state D1.", 
		"Power Resources for D2 – returns a list of dependent power resources to enter state D2.", 
		"Power Resources for D3hot – returns a list of dependent power resources to enter state D3hot.", 
		"Power Resources for Enumeration - Returns a list of dependent power resources to enumerate devices on a bus.", 
		"Power Source Redundancy List – returns a list of power source devices in the same redundancy grouping.", 
		"Power Resource for Reset – executes a reset on the associated device or devices.", 
		"Possible Resource Settings – returns a list of a device’s possible resource settings.", 
		"Pci Routing Table – returns a list of PCI interrupt mappings.", 
		"Power Resources for Wake – returns a list of dependent power resources for waking.", 
		"Power State 0 – sets a device’s power state to D0 (device fully on).", 
		"Power State 1 – sets a device’s power state to D1.", 
		"Power State 2 – sets a device’s power state to D2.", 
		"Power State 3 – sets a device’s power state to D3 (device off).", 
		"Power State Current – returns a device’s current power state.", 
		"Power State Dependencies – returns processor P-State dependencies.", 
		"Power State for Enumeration", 
		"Passive List – returns a list of passive cooling device objects.", 
		"Power Source – returns the power source device currently in use.", 
		"Performance Supported States – returns a list of supported processor performance states.", 
		"Passive – returns the passive trip point temperature.", 
		"Power State Wake – sets a device’s wake function.", 
		"Processor Throttling Control – returns throttling control and status registers.", 
		"Power Trip Points – sets trip points for the Power Meter device.", 
		"Prepare To Sleep – inform the platform of an impending sleep transition.", 
		"Processor Utilization Request – returns the number of processors that the platform would like to idle.", 
		"Proximity – returns a device’s proximity domain identifier.", 
		"Query – Embedded Controller query and SMBus Alarm control method.", 
		"Register Bit Offset – resource descriptor field.", 
		"Register Bit Width – resource descriptor field.", 
		"Resource Dependencies for Idle - returns the list of power resource dependencies for system level low power idle states.", 
		"Region – inform AML code of an operation region availability change.", 
		"Revision – returns the revision of the ACPI specification that is implemented.", 
		"Remove – returns a device’s removal ability status (docking).", 
		"Range – memory range type, resource descriptor field.", 
		"Read-Only Memory – returns a copy of the ROM data for a display device.", 
		"Device Reset   – executes a reset on the associated device or devices.", 
		"Resource Type – resource descriptor field.", 
		"Relative Temperature Values – returns temperature value information.", 
		"Read-Write Status – resource descriptor field.", 
		"Receive Buffer Size - Size of the receive buffer in a UART Serialbus connection, resource descriptor field.", 
		"S0 System State – returns values to enter the system into the S0 state.", 
		"S1 System State – returns values to enter the system into the S1 state.", 
		"S2 System State – returns values to enter the system into the S2 state.", 
		"S3 System State – returns values to enter the system into the S3 state.", 
		"S4 System State – returns values to enter the system into the S4 state.", 
		"S5 System State – returns values to enter the system into the S5 state.", 
		"S1 Device State – returns the highest D-state supported by a device when in the S1 state.", 
		"S2 Device State – returns the highest D-state supported by a device when in the S2 state.", 
		"S3 Device State – returns the highest D-state supported by a device when in the S3 state.", 
		"S4 Device State – returns the highest D-state supported by a device when in the S4 state.", 
		"S0 Device Wake State – returns the lowest D-state that the device can wake itself from S0.", 
		"S1 Device Wake State – returns the lowest D-state for this device that can wake the system from S1.", 
		"S2 Device Wake State – returns the lowest D-state for this device that can wake the system from S2.", 
		"S3 Device Wake State – returns the lowest D-state for this device that can wake the system from S3.", 
		"S4 Device Wake State – returns the lowest D-state for this device that can wake the system from S4.", 
		"System Bus – scope for device and bus objects.", 
		"Smart Battery Subsystem – returns the subsystem configuration.", 
		"Set Cooling Policy – sets the cooling policy (active or passive).", 
		"Set Device Data – sets data for a SATA device.", 
		"Segment – returns a device’s PCI Segment Group number.", 
		"Set Hardware Limit – sets the hardware limit enforced by the Power Meter.", 
		"Sharable – interrupt share status, resource descriptor field.", 
		"System Indicators – predefined scope.", 
		"Size – DMA transfer size, resource descriptor field.", 
		"System Locality Information – returns a list of NUMA system localities.", 
		"Slave Mode – Slave mode setting for a SerialBus connection, resource descriptor field.", 
		"Set Post Device – sets which video device will be posted at boot.", 
		"Connection Speed – Connection speed for a SerialBus connection, resource descriptor field", 
		"Set Resource Settings – sets a device’s resource allocation.", 
		"Set Real Time – Sets the current time to a Time and Alarm Control Method Device.", 
		"IPMI Spec Revision. See the Intelligent Platform Management Interface Specification at “Links to ACPI-Related Documents” (http://uefi.org/acpi) under the heading “Server Platform Management Interface Table”.", 
		"System Status – sets the system status indicator.", 
		"Status : (1) returns the current status of a device. (2) Returns the current on or off state of a Power Resource.", 
		"Stop Bits - Number of stop bits used in a UART SerialBus connection, resource descriptor field", 
		"Set Timing Mode – sets an IDE controller transfer timings.", 
		"Set Expired Timer Wake Policy – sets expired timer policies of the wake alarm device.", 
		"String – returns a device’s description string.", 
		"Set Timer Value – set timer values of the wake alarm device.", 
		"Supplies OSPM with the device’s Subsystem ID. Optional.", 
		"Slot User Number – returns the slot unique ID number.", 
		"System Wake Source – returns the source event that caused the system to wake.", 
		"Temporary – reserved for use by ASL compilers.", 
		"Thermal Constant 1 – returns TC1 for the passive cooling formula.", 
		"Thermal Constant 2 – returns TC2 for the passive cooling formula.", 
		"T-State Depth Limit – returns the _TSS entry number of the lowest power throttling state.", 
		"Thermal Fast Sampling Period - returns the thermal sampling period for passive cooling.", 
		"Expired Timer Wake Policy – returns timer policies of the wake alarm device.", 
		"Timer Values – returns remaining time of the wake alarm device.", 
		"Temperature – returns a thermal zone’s current temperature.", 
		"Throttling Present Capabilities – returns the current number of supported throttling states.", 
		"Trip Point Temperature – inform AML that a devices’ embedded temperature sensor has crossed a temperature trip point.", 
		"Translation – address translation offset, resource descriptor field.", 
		"Translation Sparse – sparse/dense flag, resource descriptor field.", 
		"Thermal Relationship Table – returns thermal relationships between platform devices.", 
		"Throttling State Dependencies – returns a list of T-state dependencies.", 
		"Type-Specific Flags – resource descriptor field.", 
		"Thermal Sensor Device - returns a reference to the thermal sensor reporting a zone temperature", 
		"Thermal Sampling Period – returns the thermal sampling period for passive cooling.", 
		"Throttling Supported States – returns supported throttling state information.", 
		"Temperature Sensor Threshold – returns the minimum separation for a device’s temperature trip points.", 
		"Translation Type – translation/static flag, resource descriptor field.", 
		"Transition To State – inform AML of an S-state transition.", 
		"Transmit Buffer Size – Size of the transmit buffer in a UART Serialbus connection, resource descriptor field", 
		"Type – DMA channel type (speed), resource descriptor field.", 
		"Thermal Zone – predefined scope: ACPI 1.0.", 
		"Thermal Zone Devices – returns a list of device names associated with a Thermal Zone.", 
		"Thermal Zone Member – returns a reference to the thermal zone of which a device is a member.", 
		"Thermal Zone Polling – returns a Thermal zone’s polling frequency.", 
		"Unique ID – return a device’s unique persistent ID.", 
		"USB Port Capabilities – returns a list of USB port capabilities.", 
		"User Presence Detect – returns user detection information.", 
		"User Presence Polling – returns the recommended user presence polling interval.", 
		"Vendor-defined Data – Vendor-defined data for a GPIO or SerialBus connection, resource descriptor field", 
		"Video Post Options – returns the implemented video post options.", 
		"Wake – inform AML that the system has just awakened.", 
		"Wireless Power Calibration - returns the notifier to wireless power controller.", 
		"Wireless Power Polling - returns the recommended polling frequency", 
		"Wake Event – method executed as a result of a wake event.", 
		"ACPI. Not declared in ACPI as a device. This ID is used by OSPM for the hardware resources consumed by the ACPI fixed register spaces, and the operation regions used by AML code. It represents the core ACPI hardware itself.", 
		"Generic Container Device. A device whose settings are totally controlled by its ACPI resource information, and otherwise needs no device or bus-specific driver support. This was originally known as Generic ISA Bus Device. This ID should only be used for containers that do not produce resources for consumption by child devices. Any system resources claimed by a PNP0A05 device’s _CRS object must be consumed by the container itself.", 
		"Generic Container Device. This device behaves exactly the same as the PNP0A05 device. This was originally known as Extended I/O Bus. This ID should only be used for containers that do not produce resources for consumption by child devices. Any system resources claimed by a PNP0A06 device’s _CRS object must be consumed by the container itself.", 
		"Embedded Controller Device. A host embedded controller controlled through an ACPI-aware driver.", 
		"Control Method Battery. A device that solely implements the ACPI Control Method Battery functions. A device that has some other primary function would use its normal device ID. This ID is used when the devices primary function is that of a battery.", 
		"Fan. A device that causes cooling when “on” (D0 device state).", 
		"Power Button Device. A device controlled through an ACPI-aware driver that provides power button functionality. This device is only needed if the power button is not supported using the fixed register space.", 
		"Lid Device. A device controlled through an ACPI-aware driver that provides lid status functionality. This device is only needed if the lid state is not supported using the fixed register space.", 
		"Sleep Button Device. A device controlled through an ACPI-aware driver that provides power button functionality. This device is optional.", 
		"PCI Interrupt Link Device. A device that allocates an interrupt connected to a PCI interrupt pin. See Section 6.2.13 for more details.", 
		"Memory Device. This device is a memory subsystem.", 
		"SMBus 1.0 Host Controller. An SMBus host controller (SMB-HC) compatible with the embedded controller-based SMB-HC interface (see Section 12.9), and implementing the SMBus 1.0 Specification.", 
		"Smart Battery Subsystem. The Smart battery Subsystem specified in Section 10, “Power Source Devices.”", 
		"Power Source Device. The Power Source device specified in Section 10, “Power Source Devices.” This can represent either an AC Adapter (on mobile platforms) or a fixed Power Supply.", 
		"Module Device. This device is a container object that acts as a bus node in a namespace. A Module Device without any of the _CRS, _PRS and _SRS methods behaves the same way as the Generic Container Devices (PNP0A05 or PNP0A06). If the Module Device contains a _CRS method, only these resources described in the _CRS are available for consumption by its child devices. Also, the Module Device can support _PRS and _SRS methods if _CRS is supported.", 
		"SMBus 2.0 Host Controller. An SMBus host controller (SMB-HC compatible with the embedded controller-based SMB-HC interface (see Section 12.9), and implementing the SMBus 2.0 Specification.", 
		"GPE Block Device. This device allows a system designer to describe GPE blocks beyond the two that are described in the FADT.", 
		"Processor Device. This device provides an alternative to declaring processors using the processor ASL statement. See Section 8.4 for more details.", 
		"Ambient Light Sensor Device. This device is an ambient light sensor. See Section 9.3.", 
		"I/OxAPIC Device. This device is an I/O unit that complies with both the APIC and SAPIC interrupt models.", 
		"I/O APIC Device. This device is an I/O unit that complies with the APIC interrupt model.", 
		"I/O SAPIC Device. This device is an I/O unit that complies with the SAPIC interrupt model.", 
		"Processor Aggregator Device. This device provides a control point for all processors in the platform. See Section 8.5.", 
		"Power Meter Device. This device is a power meter. See Section 10.4.", 
		"Time and Alarm Device. This device is a control method-based real-time clock and wake alarm. See Section 9.18.", 
		"User Presence Detection Device. This device senses user presence (proximity). See Section 9.16)", 
		"Processor container device. Used to declare hierarchical processor topologies (see Section 8.4.3, and Section 8.4.3.1).", 
		"Generic Buttons Device. This device reports button events corresponding to Human Interface Device (HID) control descriptors (see Section 9.19).", 
		"NVDIMM Root Device. This device contains the NVDIMM devices. See Section 9.20 and Table 5.107.", 
		"Generic Event Device. This device maps Interrupt-signaled events. See Section 5.6.9.", 
		"Wireless Power Calibration Device. This device uses user presence and notification.", 
		"USB4 host interface device. See Links to ACPI-Related Documents under the heading “USB4 Host Interface Specification”", 
		"Compute Express Link Host Bridge. This device is a Compute Express Link Host bridge.", 
		"Microsoft Windows Sound System-compatible device (obsolete; use PNPB0xx instead)", 
		"AT interrupt controller", 
		"EISA interrupt controller", 
		"MCA interrupt controller", 
		"Advanced Protocol Interrupt Controller (APIC)", 
		"Cyrix SLiC MP interrupt controller", 
		"AT timer", 
		"EISA timer", 
		"MCA timer", 
		"AT direct memory access (DMA) controller", 
		"EISA DMA controller", 
		"MCA DMA controller", 
		"IBM PC/XT keyboard controller (83-key)", 
		"IBM PC/AT keyboard controller (86-key)", 
		"IBM PC/XT keyboard controller (84-key)", 
		"IBM Enhanced (101/102-key, PS/2 mouse support)", 
		"Olivetti keyboard (83-key)", 
		"Olivetti keyboard (102-key)", 
		"Olivetti keyboard (86-key)", 
		"Microsoft Windows keyboard", 
		"General Input Device Emulation Interface (GIDEI) legacy", 
		"Olivetti keyboard (A101/102-key)", 
		"AT&T 302 keyboard", 
		"Reserved by Microsoft", 
		"Japanese keyboard A01 (106-key)", 
		"Japanese keyboard (101-key)", 
		"Japanese AX keyboard", 
		"Japanese keyboard 002/003 (106-key)", 
		"Japanese keyboard 001 (106-key)", 
		"Japanese Toshiba desktop keyboard", 
		"Japanese Toshiba laptop keyboard", 
		"Japanese Toshiba notebook keyboard", 
		"Korean keyboard (84-key)", 
		"Korean keyboard (86-key)", 
		"Korean enhanced keyboard", 
		"Korean enhanced keyboard 101b", 
		"Korean enhanced keyboard 101c", 
		"Korean enhanced keyboard 103", 
		"Standard LPT port", 
		"Extended capabilities port (ECP) printer port", 
		"Standard PC COM port", 
		"16550A-compatible COM port", 
		"Multiport serial device (non-intelligent 16550)", 
		"Generic IrDA-compatible device", 
		"Generic IrDA-compatible device", 
		"Generic ESDI/IDE/ATA-compatible hard disk controller", 
		"Plus Hardcard II", 
		"Plus Hardcard IIXL/EZ", 
		"Generic Integrated Device Electronics (IDE) supporting Device Bay specifications", 
		"PC standard floppy disk controller (FDC)", 
		"Standard FDC supporting Device Bay specification", 
		"VGA compatible", 
		"Video Seven VRAM/VRAM II/1024i", 
		"8514/A compatible", 
		"Trident VGA", 
		"Cirrus Logic laptop VGA", 
		"Cirrus Logic VGA", 
		"Tseng ET4000", 
		"Western Digital VGA", 
		"Western Digital laptop VGA", 
		"S3 Inc. 911/924", 
		"ATI Ultra Pro/Plus (Mach 32)", 
		"ATI Ultra (Mach 8)", 
		"XGA compatible", 
		"ATI VGA Wonder", 
		"Weitek P9000 graphics adapter", 
		"Oak Technology VGA", 
		"Compaq QVision", 
		"XGA/2", 
		"Tseng Labs W32/W32i/W32p", 
		"S3 Inc. 801/928/964", 
		"Cirrus Logic 5429/5434 (memory-mapped)", 
		"Compaq Advanced VGA (AVGA)", 
		"ATI Ultra Pro Turbo (Mach 64)", 
		"Reserved by Microsoft", 
		"Matrox MGA", 
		"Compaq QVision 2000", 
		"Tseng W128", 
		"Chips & Technologies SVGA", 
		"Chips & Technologies Accelerator", 
		"NCR 77c22e SVGA", 
		"NCR 77c32blt", 
		"Plug and Play monitors (VESA display data channel [DDC])", 
		"ISA bus", 
		"EISA bus", 
		"MCA bus", 
		"Peripheral Component Interconnect (PCI) bus", 
		"VESA/VL-bus", 
		"Generic Advanced Configuration and Power Interface (ACPI) bus", 
		"Generic ACPI Extended I/O (EIO) bus", 
		"AT-style speaker sound", 
		"AT real-time clock", 
		"Plug and Play BIOS (only created by the ROOT enumerator)", 
		"System board", 
		"General ID for reserving resources required by Plug and Play system board registers (not specific to a particular device)", 
		"Plug and Play BIOS event notification interrupt", 
		"Math co-processor", 
		"Advanced Power Management (APM) BIOS (version-independent)", 
		"Reserved for identification of early Plug and Play BIOS implementation", 
		"Reserved for identification of early Plug and Play BIOS implementation", 
		"ACPI system board hardware", 
		"ACPI embedded controller", 
		"ACPI control method battery", 
		"ACPI fan", 
		"ACPI power-button device", 
		"ACPI lid device", 
		"ACPI sleep-button device", 
		"PCI interrupt link device", 
		"ACPI system indicator device", 
		"ACPI thermal zone", 
		"Device Bay Controller (DBC)", 
		"Plug and Play BIOS (used when ACPI mode cannot be used)", 
		"Intel 82365-compatible PCMCIA controller", 
		"Cirrus Logic CL-PD6720 PCMCIA controller", 
		"VLSI VL82C146 PCMCIA controller", 
		"Intel 82365-compatible CardBus controller", 
		"Microsoft bus mouse", 
		"Microsoft serial mouse", 
		"Microsoft InPort mouse", 
		"Microsoft PS/2-style mouse", 
		"Mouse Systems mouse", 
		"Mouse Systems 3-button mouse (COM2)", 
		"Genius mouse (COM1)", 
		"Genius mouse (COM2)", 
		"Logitech serial mouse", 
		"Microsoft BallPoint serial mouse", 
		"Microsoft Plug and Play mouse", 
		"Microsoft Plug and Play BallPoint mouse", 
		"Microsoft-compatible serial mouse", 
		"Microsoft InPort-compatible mouse", 
		"Microsoft-compatible PS/2-style mouse", 
		"Microsoft Serial BallPoint-compatible mouse", 
		"Texas Instruments QuickPort mouse", 
		"Microsoft-compatible bus mouse", 
		"Logitech PS/2-style mouse", 
		"1	PS/2 port for PS/2-style mouse", 
		"Microsoft Kids mouse", 
		"Logitech bus mouse", 
		"Logitech SWIFT device", 
		"Logitech-compatible serial mouse", 
		"Logitech-compatible bus mouse", 
		"Logitech-compatible PS/2-style mouse", 
		"Logitech-compatible SWIFT device", 
		"HP Omnibook mouse", 
		"Compaq LTE Trackball PS/2-style mouse", 
		"Compaq LTE Trackball serial mouse", 
		"Microsoft Kids Trackball mouse", 
		"Reserved by Microsoft Input Device Group", 
		"Reserved by Microsoft Input Device Group", 
		"Reserved by Microsoft Input Device Group", 
		"Reserved by Microsoft Input Device Group", 
		"Reserved by Microsoft Input Device Group", 
		"Reserved by Microsoft Systems", 
		"Novell/Anthem NE3200", 
		"Compaq NE3200", 
		"Intel EtherExpress/32", 
		"HP Ethertwist EISA LAN Adapter/32 (HP27248A)", 
		"Ungermann-Bass NIUps or NIUps/EOTP", 
		"DEC (DE211) Etherworks MC/TP", 
		"DEC (DE212) Etherworks MC/TP_BNC", 
		"DCA 10-MB MCA", 
		"HP MC LAN Adapter/16 TP (PC27246)", 
		"IBM Token Ring", 
		"IBM Token Ring II", 
		"IBM Token Ring II/Short", 
		"IBM Token Ring 4/16-MB", 
		"Novell/Anthem NE1000", 
		"Novell/Anthem NE2000", 
		"NE1000 compatible", 
		"NE2000 compatible", 
		"Novell/Anthem NE1500T", 
		"Novell/Anthem NE2100", 
		"SMC ARCNETPC", 
		"SMC ARCNET PC100, PC200", 
		"SMC ARCNET PC110, PC210, PC250", 
		"SMC ARCNET PC130/E", 
		"SMC ARCNET PC120, PC220, PC260", 
		"SMC ARCNET PC270/E", 
		"SMC ARCNET PC600W, PC650W", 
		"DEC DEPCA", 
		"DEC (DE100) EtherWorks LC", 
		"DEC (DE200) EtherWorks Turbo", 
		"DEC (DE101) EtherWorks LC/TP", 
		"DEC (DE201) EtherWorks Turbo/TP", 
		"DEC (DE202) EtherWorks Turbo/TP_BNC", 
		"DEC (DE102) EtherWorks LC/TP_BNC", 
		"DEC EE101 (built-in)", 
		"DECpc 433 WS (built-in)", 
		"3Com EtherLink Plus", 
		"3Com EtherLink II or IITP (8-bit or 16-bit)", 
		"3Com TokenLink", 
		"3Com EtherLink 16", 
		"3Com EtherLink III", 
		"3Com generic EtherLink Plug and Play device", 
		"Thomas-Conrad TC6045", 
		"Thomas-Conrad TC6042", 
		"Thomas-Conrad TC6142", 
		"Thomas-Conrad TC6145", 
		"Thomas-Conrad TC6242", 
		"Thomas-Conrad TC6245", 
		"DCA 10-MB", 
		"DCA 10-MB Fiber Optic", 
		"DCA 10-MB Twisted Pair", 
		"Racal NI6510", 
		"Ungermann-Bass NIUpc", 
		"Ungermann-Bass NIUpc/EOTP", 
		"SMC StarCard PLUS (WD/8003S)", 
		"SMC StarCard PLUS with on-board hub (WD/8003SH)", 
		"SMC EtherCard PLUS (WD/8003E)", 
		"SMC EtherCard PLUS with boot ROM socket (WD/8003EBT)", 
		"SMC EtherCard PLUS with boot ROM socket (WD/8003EB)", 
		"SMC EtherCard PLUS TP (WD/8003WT)", 
		"SMC EtherCard PLUS 16 with boot ROM socket (WD/8013EBT)", 
		"Intel EtherExpress 16 or 16TP", 
		"Intel TokenExpress 16/4", 
		"Intel TokenExpress MCA 16/4", 
		"Intel EtherExpress 16 (MCA)", 
		"Artisoft AE-1", 
		"Artisoft AE-2 or AE-3", 
		"Amplicard AC 210/XT", 
		"Amplicard AC 210/AT", 
		"Everex SpeedLink /PC16 (EV2027)", 
		"HP PC LAN Adapter/8 TP (HP27245)", 
		"HP PC LAN Adapter/16 TP (HP27247A)", 
		"HP PC LAN Adapter/8 TL (HP27250)", 
		"HP PC LAN Adapter/16 TP Plus (HP27247B)", 
		"HP PC LAN Adapter/16 TL Plus (HP27252)", 
		"National Semiconductor Ethernode *16AT", 
		"National Semiconductor AT/LANTIC Ethernode 16-AT3", 
		"NCR Token-Ring 4-MB ISA", 
		"NCR Token-Ring 16/4-MB ISA", 
		"Olicom 16/4 Token Ring Adapter", 
		"SMC EtherCard PLUS Elite (WD/8003EP)", 
		"SMC EtherCard PLUS 10T (WD/8003W)", 
		"SMC EtherCard PLUS Elite 16 (WD/8013EP)", 
		"SMC EtherCard PLUS Elite 16T (WD/8013W)", 
		"SMC EtherCard PLUS Elite 16 Combo (WD/8013EW or 8013EWC)", 
		"SMC EtherElite Ultra 16", 
		"Pure Data PDI9025-32 (Token Ring)", 
		"Pure Data PDI508+ (ArcNet)", 
		"Pure Data PDI516+ (ArcNet)", 
		"Proteon Token Ring (P1390)", 
		"Proteon Token Ring (P1392)", 
		"Proteon ISA Token Ring (1340)", 
		"Proteon ISA Token Ring (1342)", 
		"Proteon ISA Token Ring (1346)", 
		"Proteon ISA Token Ring (1347)", 
		"Cabletron E2000 Series DNI", 
		"Cabletron E2100 Series DNI", 
		"Zenith Data Systems Z-Note", 
		"Zenith Data Systems NE2000-compatible", 
		"Xircom Pocket Ethernet II", 
		"Xircom Pocket Ethernet I", 
		"RadiSys EXM-10", 
		"SMC 3000 Series", 
		"SMC 91C2 controller", 
		"Advanced Micro Devices AM2100/AM1500T", 
		"Tulip NCC-16", 
		"Exos 105", 
		"Intel 595-based Ethernet", 
		"TI2000-style Token Ring", 
		"AMD PCNet Family cards", 
		"AMD PCNet32 (VL-bus version)", 
		"IrDA Infrared NDIS driver (Microsoft-supplied)", 
		"IBM PCMCIA-NIC", 
		"Xircom CE10", 
		"Xircom CEM2", 
		"DEC Ethernet (all types)", 
		"SMC EtherCard (all types except 8013/A)", 
		"ARCNET-compatible", 
		"Thomas Conrad (all ARCNET types)", 
		"IBM Token Ring (all types)", 
		"Remote network access (RNA) driver", 
		"RNA point-to-point protocol (PPP) driver", 
		"Reserved for Microsoft networking components", 
		"Peer IrLAN IR driver (Microsoft-supplied)", 
		"Generic network adapter", 
		"Future Domain 16-700–compatible controller", 
		"Panasonic proprietary CD-ROM adapter (SBPro/SB16)", 
		"Trantor 128 SCSI controller", 
		"Trantor T160 SCSI controller", 
		"Trantor T338 Parallel SCSI controller", 
		"Trantor T348 Parallel SCSI controller", 
		"Trantor Media Vision SCSI controller", 
		"Always IN-2000 SCSI controller", 
		"Sony proprietary CD-ROM controller", 
		"Trantor T13b 8-bit SCSI controller", 
		"Trantor T358 Parallel SCSI controller", 
		"Mitsumi LU-005 Single Speed CD-ROM controller + drive", 
		"Mitsumi FX-001 Single Speed CD-ROM controller + drive", 
		"Mitsumi FX-001 Double Speed CD-ROM controller + drive", 
		"Sound Blaster 1.5 sound device", 
		"Sound Blaster 2.0 sound device", 
		"Sound Blaster Pro sound device", 
		"Sound Blaster 16 sound device", 
		"Thunderboard-compatible sound device", 
		"Adlib-compatible frequency modulation (FM) synthesizer device", 
		"MPU401 compatible", 
		"Microsoft Windows Sound System-compatible sound device", 
		"Compaq Business Audio", 
		"Plug and Play Microsoft Windows Sound System device", 
		"MediaVision Pro Audio Spectrum (Trantor SCSI-enabled, Thunder Chip-disabled)", 
		"MediaVision Pro Audio 3-D", 
		"MusicQuest MQX-32M", 
		"MediaVision Pro Audio Spectrum Basic (no Trantor SCSI, Thunder Chip-enabled)", 
		"MediaVision Pro Audio Spectrum (Trantor SCSI-enabled, Thunder Chip-enabled)", 
		"MediaVision Jazz-16 chip set (OEM versions)", 
		"Auravision VxP500 chip set–Orchid Videola", 
		"MediaVision Pro Audio Spectrum 8-bit", 
		"MediaVision Pro Audio Spectrum Basic (no Trantor SCSI, Thunder chip-disabled)", 
		"Yamaha OPL3-compatible FM synthesizer device", 
		"Joystick/gameport", 
		"Compaq 14400 modem (TBD)", 
		"Compaq 2400/9600 modem (TBD)"
		];
	for (let IndexVal =0 ; IndexVal < PreDefineName.length; IndexVal ++)
	{
		if (STxt.toUpperCase() == PreDefineName[IndexVal].toUpperCase())
		{
			if (PreDefNameHelpStr.length >= IndexVal)
			{
				return PreDefNameHelpStr[IndexVal];
			}
		}
	}

	let UpStrNew = STxt.toUpperCase();
	if ((UpStrNew.length == 7) && (UpStrNew.indexOf("PNP")>=0)) // PNP
	{
		if (UpStrNew.indexOf("PNP0")>=0){
			return "System Device. Note: only generic info was found based on PNP Spec.";
		}
		if (UpStrNew.indexOf("PNP8")>=0){
			return "Network adapters.";
		}
		if (UpStrNew.indexOf("PNPA")>=0){
			return "Small computer system interface (SCSI), proprietary CD adapters. Note: only generic info was found based on PNP Spec.";
		}
		if (UpStrNew.indexOf("PNPB")>=0){
			return "Sound, video capture, multimedia. Note: only generic info was found based on PNP Spec.";
		}
		if (UpStrNew.indexOf("PNPC")>=0){
			return "Modems. Note: only generic info was found based on PNP Spec.";
		}
		if (UpStrNew.indexOf("PNPD")>=0){
			return "Modems. Note: only generic info was found based on PNP Spec.";
		}
	}
 
	for (let IndexVal =0 ; IndexVal < configManager.configKey.length; IndexVal ++)
	{
		if (STxt.toUpperCase() == configManager.configKey[IndexVal].toUpperCase())
		{
			if (configManager.configDesc.length >= IndexVal)
			{
				return configManager.configDesc[IndexVal];
			}
		}
	}
	

	
	return "";
}
// this method is called when your extension is deactivated
export function deactivate() {}
